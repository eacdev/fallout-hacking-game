{"version":3,"sources":["components/Character.js","components/CharacterSequence.js","components/utils.js","components/Game.js","App.js","serviceWorker.js","index.js"],"names":["Character","character","checkWinner","onClick","length","handleClick","className","CharacterSequence","sequence","split","hex","output","map","w","index","charAt","match","key","c","random","max","Math","floor","generateFiller","characters","filler","i","generateHex","hexStart","increment","toString","toLocaleUpperCase","addWords","sequences","words","amount","copiedSequences","copiedWords","sequencesArrayIndexes","array","temporaryValue","randomIndex","copiedArray","currentIndex","shuffle","keys","wordIndex","word","splice","wordStart","sequenceIndex","fillerOne","substring","fillerTwo","Game","useState","attempsLeft","setAttempsLeft","push","generateSequences","winnerWord","console","log","id","App","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.cee36228.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction Character({ character, checkWinner }) {\n  function handleClick(character) {\n    if (character.length > 1) {\n      // sound\n      checkWinner(character);\n    } else {\n      // sound\n    }\n  }\n\n  return (\n    <span onClick={() => handleClick(character)} className=\"character\">\n      {character}\n    </span>\n  );\n}\n\nexport default Character;\n","import React from \"react\";\n\nimport Character from \"./Character\";\n\nfunction CharacterSequence({ sequence, checkWinner }) {\n  // Ex: \"0xEF8B ^%PRESSURE!%\"\n  let split = sequence.split(\" \");\n\n  // \"0xEF8B\"\n  const hex = split[0];\n\n  // [\"^%\", \"PRESSURE\", \"!%\"]\n  const characters = split[1].split(/([A-Z]+)/);\n\n  const output = characters.map((w, index) => {\n    // If w has a letter in [A-Z] then it the word in the sequence, we pass it to Character componenent.\n    if ([...w][0] && [...w][0].charAt(0).match(/[A-Z]/)) {\n      return <Character key={index} character={w} checkWinner={checkWinner}></Character>;\n    }\n\n    // w is not a word, each of it's letters gets it's own Character component.\n    return [...w].map((c, index) => <Character key={index} character={c} checkWinner={checkWinner}></Character>);\n  });\n\n  return (\n    <p>\n      {hex} {output}\n    </p>\n  );\n}\n\nexport default CharacterSequence;\n","/**\n * Generate a random integer between 0 inclusive and max exclusive\n * @param {number} max maximum random value range, exclusive\n */\nexport const random = (max) => Math.floor(Math.random() * max);\n\n/**\n * Shuffle an array using the Fisher-Yates algorithm.\n * @param {Array} array the array to shuffle.\n */\nexport const shuffle = (array) => {\n  const copiedArray = [...array];\n\n  var currentIndex = copiedArray.length,\n    temporaryValue,\n    randomIndex;\n\n  while (currentIndex > 0) {\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex--;\n\n    temporaryValue = copiedArray[currentIndex];\n    copiedArray[currentIndex] = copiedArray[randomIndex];\n    copiedArray[randomIndex] = temporaryValue;\n  }\n\n  return copiedArray;\n};\n\n/**\n * Generates a string from filler characters. Ex: \"*.!++}/.,.#^\"\n * @param {string} characters the characters to randomly choose from\n * @param {number} length the length of the filler string\n */\nexport function generateFiller(characters, length) {\n  let filler = \"\";\n\n  for (let i = 0; i < length; i++) {\n    filler += characters.charAt(random(characters.length));\n  }\n\n  return filler;\n}\n\n/**\n * Each row is preceded by 0x${HEXCODE}.\n * @param {number} hexStart the decimal number to use as a starting point.\n * @param {number} i number of times to multiply increment by.\n * @param {number} increment the increment to use when adding to hexStart.\n */\nexport function generateHex(hexStart, i, increment) {\n  // Each row has a HEX identifier which starts at 61623 (decimal) and increases by 12 every row.\n  // Ex: 0xF0B7, 0xF0C3, etc.\n  return `0x${(hexStart + increment * i).toString(16).toLocaleUpperCase()}`;\n}\n\n/**\n * Generates an array of sequences in the Fallout terminal format.\n * Ex: 0xEF8B %^ABILITY/.}\n * @param {number} amount how many sequences to put in the array.\n * @param {string} characters the characters to randomly choose from\n */\nexport function generateSequences(amount, characters) {\n  const sequences = [];\n\n  for (let i = 0; i < amount; i++) {\n    let sequence = `${generateHex(61323, i, 12)} ${generateFiller(characters, 12)}`;\n    sequences.push(sequence);\n  }\n\n  return sequences;\n}\n\n/**\n * Randomly adds words from a word list to an array of sequences.\n * @param {string[]} sequences the array of sequences to add words to.\n * @param {string[]} words the word list to choose from.\n * @param {number} amount the amount of words to add in the sequences array.\n * @return {string[]} updated sequences array\n */\nexport function addWords(sequences, words, amount) {\n  // Length of a HEX, including whitespace.\n  const lengthOfHex = 7;\n\n  // Create shallow copy to not mutate passed argument.\n  const copiedSequences = [...sequences];\n  const copiedWords = [...words];\n\n  // Create shallow copy to not mutate passed argument.\n  // Array containing the indexes of the sequences array in random order.\n  const sequencesArrayIndexes = shuffle([...sequences.keys()]);\n\n  for (let i = 0; i < amount; i++) {\n    // Pick a word from copiedWords and remove it, preventing duplicates.\n    const wordIndex = random(copiedWords.length);\n    const word = copiedWords[wordIndex];\n    copiedWords.splice(wordIndex, 1);\n\n    // Pick a random spot in the 12-character sequence to place the word.\n    // Filler will be put around it.\n    const wordStart = random(12 - word.length);\n\n    // Put filler around the word.\n    const sequenceIndex = sequencesArrayIndexes[i];\n    const fillerOne = copiedSequences[sequenceIndex].substring(0, wordStart + lengthOfHex);\n    const fillerTwo = copiedSequences[sequenceIndex].substring(wordStart + word.length + lengthOfHex);\n    copiedSequences[sequenceIndex] = fillerOne + word + fillerTwo;\n  }\n\n  // return new sequences array\n  return copiedSequences;\n}\n","import React, { useState } from \"react\";\n\nimport CharacterSequence from \"./CharacterSequence\";\n\nimport { addWords, generateSequences, random } from \"./utils\";\n\nconst characters = \"./@.!@#$%^&*()-=+><,[]{}\";\nconst words = [\"STORY\", \"SYNOPSIS\", \"THE\", \"PLAYER\", \"CHARACTER\", \"STUMBLES\", \"IRRADIATED\", \"PRESSURE\", \"ABILITY\"];\n\nfunction Game() {\n  const [attempsLeft, setAttempsLeft] = useState(3);\n\n  const [sequences] = useState(() => {\n    return addWords(generateSequences(34, characters), words, 9);\n  });\n\n  const [winnerWord] = useState(() => {\n    return words[random(words.length)];\n  });\n\n  const checkWinner = (word) => {\n    if (word === winnerWord) {\n      console.log(\"You win!\");\n      return;\n    }\n\n    if (attempsLeft > 0) {\n      setAttempsLeft(attempsLeft - 1);\n    } else {\n      console.log(\"You lose!\");\n    }\n  };\n\n  return (\n    <div id=\"terminal\">\n      <div className=\"header\">\n        <p>ROBCO INDUSTRIES (TM) TERMLINK PROTOCOL</p>\n        <p>ENTER PASSWORD NOW</p>\n        <p>Winner word: {winnerWord}</p>\n      </div>\n      <div className=\"attempts\">\n        <p>{attempsLeft} ATTEMPT(S) LEFT...</p>\n      </div>\n      {sequences.map((sequence, index) => (\n        <CharacterSequence key={index} sequence={sequence} checkWinner={checkWinner}></CharacterSequence>\n      ))}\n    </div>\n  );\n}\n\nexport default Game;\n","import React from \"react\";\nimport \"./styles/App.scss\";\n\nimport Game from \"./components/Game\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Game />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}