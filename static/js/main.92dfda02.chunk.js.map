{"version":3,"sources":["components/Character.js","components/CharacterSequence.js","components/Game.js","App.js","serviceWorker.js","index.js"],"names":["Character","character","onClick","console","log","className","CharacterSequence","split","sequence","hex","output","map","w","charAt","match","c","Game","generateFiller","characters","length","filler","i","Math","floor","random","generateHex","hexStart","increment","toString","toLocaleUpperCase","sequences","amount","push","generateSequences","words","wordIndex","word","splice","wordStart","index","substr","addWords","id","App","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"8OAUeA,MARf,YAAmC,IAAdC,EAAa,EAAbA,UACnB,OACE,0BAAMC,QAAS,WAAOC,QAAQC,IAAIH,IAAaI,UAAU,aACtDJ,IC0BQK,MA3Bf,YAA0C,IAEpCC,EAFmC,EAAZC,SAEND,MAAM,KAGrBE,EAAMF,EAAM,GAKZG,EAFaH,EAAM,GAAGA,MAAM,YAERI,KAAI,SAAAC,GAE5B,OAAI,YAAIA,GAAG,IAAM,YAAIA,GAAG,GAAGC,OAAO,GAAGC,MAAM,SAClC,kBAAC,EAAD,CAAWb,UAAWW,IAIxB,YAAIA,GAAGD,KAAI,SAAAI,GAAC,OAAI,kBAAC,EAAD,CAAWd,UAAWc,UAG/C,OACE,2BACGN,EADH,IACSC,IC4EEM,MAlGf,WAWE,SAASC,EAAeC,EAAYC,GAGlC,IAFA,IAAIC,EAAS,GAEJC,EAAI,EAAGA,EAAIF,EAAQE,IAC1BD,GAAUF,EAAWL,OAAOS,KAAKC,MAAMD,KAAKE,SAAWN,EAAWC,SAGpE,OAAOC,EAST,SAASK,EAAYC,EAAUL,EAAGM,GAKhC,MAFS,aAASD,EAAWC,EAAYN,GAAGO,SAAS,IAAIC,qBA8C3D,IAAIC,EApCJ,SAA2BC,GAGzB,IAFA,IAAID,EAAY,GAEPT,EAAI,EAAGA,EAAIU,EAAQV,IAAK,CAC/B,IAAIb,EAAQ,UAAMiB,EAAY,MAAOJ,EAAG,IAA5B,YAAmCJ,EAzClC,2BAyC6D,KAC1Ea,EAAUE,KAAKxB,GAGjB,OAAOsB,EA4BOG,CAAkB,IAIlC,OAvBA,SAAkBH,EAAWI,EAAOH,GAGlC,IAFA,IAESV,EAAI,EAAGA,EAAIU,EAAQV,IAAK,CAE/B,IAAIc,EAAYb,KAAKC,MAAMD,KAAKE,SAAWU,EAAMf,QAC7CiB,EAAOF,EAAMC,GACjBD,EAAMG,OAAOF,EAAW,GAIxB,IAAIG,EAAYhB,KAAKC,MAAMD,KAAKE,UAAY,GAAKY,EAAKjB,SAGlDoB,EAAQjB,KAAKC,MAAMD,KAAKE,SAAWM,EAAUX,QACjDW,EAAUS,GAAST,EAAUS,GAAOC,OAAO,EAAGF,EAd5B,GAcuDF,EAAON,EAAUS,GAAOC,OAAOF,EAAYF,EAAKjB,OAdvG,IAoBtBsB,CAASX,EA1EG,CAAC,QAAS,WAAY,MAAO,SAAU,YAAa,WAAY,aAAc,WAAY,WA0E3E,GAGzB,yBAAKY,GAAG,OACN,yBAAKA,GAAG,YACN,yBAAKrC,UAAU,UACb,sEACA,kDAEF,yBAAKA,UAAU,YACb,2BAvFY,EAuFZ,wBAEDyB,EAAUnB,KAAI,SAACH,GAAD,OACb,kBAAC,EAAD,CAAmBA,SAAQ,UAAKA,WClF3BmC,MARf,WACE,OACE,yBAAKtC,UAAU,OACb,kBAAC,EAAD,QCIcuC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASjC,MACvB,2DCZNkC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLzD,QAAQyD,MAAMA,EAAMC,c","file":"static/js/main.92dfda02.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction Character({ character }) {\n  return (\n    <span onClick={() => {console.log(character)}} className=\"character\">\n      {character}\n    </span>\n  );\n}\n\nexport default Character;\n","import React from \"react\";\n\nimport Character from \"./Character\";\n\nfunction CharacterSequence({ sequence }) {\n  // Ex: \"0xEF8B ^%PRESSURE!%\"\n  let split = sequence.split(\" \");\n\n  // \"0xEF8B\"\n  const hex = split[0];\n\n  // [\"^%\", \"PRESSURE\", \"!%\"]\n  const characters = split[1].split(/([A-Z]+)/)\n\n  const output = characters.map(w => {\n    // If w has a letter in [A-Z] then it the word in the sequence, we pass it to Character componenent.\n    if ([...w][0] && [...w][0].charAt(0).match(/[A-Z]/)) {\n      return <Character character={w}></Character>;\n    }\n\n    // w is not a word, each of it's letters gets it's own Character component.\n    return [...w].map(c => <Character character={c}></Character>);\n})\n\n  return (\n    <p>\n      {hex} {output}\n    </p>\n  );\n}\n\nexport default CharacterSequence;\n","import React from \"react\";\n\nimport CharacterSequence from \"./CharacterSequence\";\n\nfunction Game() {\n  let nbAttempsLeft = 3;\n\n  let characters = \"./@.!@#$%^&*()-=+><,[]{}\";\n  let words = [\"STORY\", \"SYNOPSIS\", \"THE\", \"PLAYER\", \"CHARACTER\", \"STUMBLES\", \"IRRADIATED\", \"PRESSURE\", \"ABILITY\"];\n\n  /**\n   * Generates a string from filler characters. Ex: \"*.!++}/.,.#^\"\n   * @param {*} characters the characters to randomly choose from\n   * @param {*} length the length of the filler string\n   */\n  function generateFiller(characters, length) {\n    let filler = \"\";\n\n    for (let i = 0; i < length; i++) {\n      filler += characters.charAt(Math.floor(Math.random() * characters.length));\n    }\n\n    return filler;\n  }\n\n  /**\n   * Each row is preceded by 0x${HEXCODE}.\n   * @param {*} hexStart the decimal number to use as a starting point.\n   * @param {*} i number of times to multiply increment by.\n   * @param {*} increment the increment to use when adding to hexStart.\n   */\n  function generateHex(hexStart, i, increment) {\n    // Each row has a HEX identifier which starts at 61623 (decimal) and increases by 12 every row.\n    // Ex: 0xF0B7, 0xF0C3, etc.\n    const hex = `0x${(hexStart + increment * i).toString(16).toLocaleUpperCase()}`;\n\n    return hex;\n  }\n\n  /**\n   * Generates an array of sequences in the Fallout terminal format.\n   * Ex: 0xEF8B %^ABILITY/.}\n   * @param {*} amount how many sequences to put in the array.\n   */\n  function generateSequences(amount) {\n    let sequences = [];\n\n    for (let i = 0; i < amount; i++) {\n      let sequence = `${generateHex(61323, i, 12)} ${generateFiller(characters, 12)}`;\n      sequences.push(sequence);\n    }\n\n    return sequences;\n  }\n\n  /**\n   * Randomly adds words from a word list to an array of sequences.\n   * @param {*} sequences the array of sequences to add words to.\n   * @param {*} words the word list to choose from.\n   * @param {*} amount the amount of words to add in the sequences array.\n   */\n  function addWords(sequences, words, amount) {\n    const lengthOfHex = 7;\n\n    for (let i = 0; i < amount; i++) {\n      // Choose a word in the word list and remove it after (prevent duplicates).\n      let wordIndex = Math.floor(Math.random() * words.length);\n      let word = words[wordIndex];\n      words.splice(wordIndex, 1);\n\n      // Choose a random number that will determine where the word starts in the sequence.\n      // (12 - word.length) is the remaining spaces for filler characters.\n      let wordStart = Math.floor(Math.random() * (12 - word.length));\n\n      // Choose a random sequence to add a word to. TODO: Prevent duplicates.\n      let index = Math.floor(Math.random() * sequences.length);\n      sequences[index] = sequences[index].substr(0, wordStart + lengthOfHex) + word + sequences[index].substr(wordStart + word.length + lengthOfHex);\n    }\n  }\n\n  let sequences = generateSequences(34);\n\n  addWords(sequences, words, 9);\n\n  return (\n    <div id=\"App\">\n      <div id=\"terminal\">\n        <div className=\"header\">\n          <p>ROBCO INDUSTRIES (TM) TERMLINK PROTOCOL</p>\n          <p>ENTER PASSWORD NOW</p>\n        </div>\n        <div className=\"attempts\">\n          <p>{nbAttempsLeft} ATTEMPT(S) LEFT...</p>\n        </div>\n        {sequences.map((sequence) => (\n          <CharacterSequence sequence={`${sequence}`}></CharacterSequence>\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default Game;\n","import React from \"react\";\nimport \"./styles/App.scss\";\n\nimport Game from \"./components/Game\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Game />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}